package practice;

public class Array {
	public static void main(String[] args) {

		
		Array array=new Array();
		array.init();
		array.primitiveTypes();
		array.referenceTypes();
		array.otherInit();
		//array.twoDimensionArray();
		array.printArrayLength();
	
	}

	
	public void init() {
		int []lottoNumbers=new int[7];
		
		lottoNumbers [0]=5;
		lottoNumbers [1]=12;
		lottoNumbers [2]=23;
		lottoNumbers [3]=25;
		lottoNumbers [4]=38;
		lottoNumbers [5]=41;
		lottoNumbers [6]=2;
		//lottoNumbers [7]=9;
		
		System.out.println(lottoNumbers[4]);
		
		
	}
	
	// 여러 타입의 Array 형태 출력해보기. 그리고  타입의 순서를 bsilFD(비실FD) 라고 외우면 좋다고 했다. 
	public void primitiveTypes() {
		System.out.println("---------");
		
		byte []byteArray = new byte[1]; // 인덱스값이 1이다. 그러므로 인덱스의 개수는 0번방(1개)밖에 없는 것이다. -=
		short []shortArray = new short[1];
		int []intArray = new int[1];
		long []longArray = new long[1];
		float []floatArray = new float[1]; 
		double []doubleArray = new double[1];
		char []charArray = new char[1]; 
		boolean []boolenArray = new boolean[1]; 
		
		System.out.println("byteArray[0]="+byteArray[0]);
		System.out.println("shortArray[0]="+shortArray[0]);
		System.out.println("intArray[0]="+intArray[0]);
		System.out.println("longArray[0]="+longArray[0]);
		System.out.println("floatArray[0]="+floatArray[0]);
		System.out.println("doubleArray[0]="+doubleArray[0]);
		System.out.println("charArray[0]="+charArray[0]); //char 배열의 기본 값은 '\u0000'이다. 그래서 출력 시 한 칸 공백으로 보인다. 
		System.out.println("booleanArray[0]="+boolenArray[0]); // boolean의 기본 값은 false이다. 
		System.out.println("-----------");
		//배열 그냥 출력하기 
		// [는 배열이라는 뜻이며, 실행 결과에서 대괄호 뒤에 해당 타입을 대표하는 문자가 출력된다. byte는 [B, short는 [S... 
		// long 하고 boolean의 배열 출력값은 [L, [B가 아니라 > [J [Z 로 출력되었다. 참조 배열형의 배열과 구분이 안되기 때문에 남아있는 알파벳 중 J를 사용해서 long 배열을 표시한 것 
		// boolean의 경우 byte타입이 [B를 선점했기 때문에 울며 겨자먹기로 [Z로 표현 ,,, 
		System.out.println("byteArray[0]="+byteArray);
		System.out.println("shortArray[0]="+shortArray);
		System.out.println("intArray[0]="+intArray);
		System.out.println("longArray[0]="+longArray);
		System.out.println("floatArray[0]="+floatArray);
		System.out.println("doubleArray[0]="+doubleArray);
		System.out.println("charArray[0]="+charArray); //char 배열의 기본 값은 '\u0000'이다. 그래서 출력 시 한 칸 공백으로 보인다. 
		System.out.println("booleanArray[0]="+boolenArray); // boolean의 기본 값은 false이다. 
		
				}
	
	public void referenceTypes() {
		System.out.println("----------");
		String [] strings = new String[2];
		Array [] array = new Array[2];
		strings[0]="Please visit www.naver.com";
		array[0]=new Array();
		System.out.println("strings[0]="+strings[0]); //위에서 정의한 strings[0]에 할당했던 문자열이 출력된다. 
		System.out.println("strings[1]="+strings[1]); // strings[1] 인덱스에는 아무런 값도 입력하지 않았기 때문에 null값이 된다. 
		System.out.println("array[0]="+array[0]); // array 객체를 출력한 결과. 내가 설정한 패키지 이름과 타입의 이름, 골뱅이가 붙어서 나왔다. 참조 자료형은 public String toString()이라는 메소드를 만들어줘야만 암호 같은 내용이 출력되지 않는다. 
		System.out.println("array[0]="+array[1]); // array[1] 인덱스에는 아무런 값도 입력하지 않았기 때문에 null값이 뜬다. 인덱스1번방에 null값이 있는게 아니라, 값이 아예 없는 null 상태이다. 
		
		System.out.println("string="+strings);
		System.out.println("array="+array);
		
		                               }
	// 중괄호를 사용하면 보다 한번에 배열을 선언할 수 있다. 
	// 중괄호를 사용하여 배열 초기화를 할 때에는 반드시 한번에 변수 선언 및 초기화가 이루어져야 한다(변수 선언과 초기화가 따로따로 이루어지면 컴파일 에러 발생) 
	// 모든 배열에 들어가는 값이 계속 바뀔 수도 있고, 언제든지 변경이 가능하기 때문에 보통 "절대 변경되지 않는 값"을 지정할 때 중괄호로 선언하여 사용한다. (달력의 월 같은 경우, 메소드 내에서 선언하여 사용하는 것보다는 클래스의 변수로 선언하여 재활용하는 것이 좋다.)  
	// 근데 otherInit() 메소드 안에서만 사용하는 month 배열이라면 굳이 클래스 변수로 꺼낼 필요는 없다. Array 라는 클래스의 객체를 생성할때마다 month 배열이 생성되기 때문. 얼마나 자주 사용하는지 / 어디에서 사용하는지를 확인하여 메소드에서 선언 or 클래스 인스턴스 선언할지 결정 
	public void otherInit() {
		System.out.println("----------");
		int [] lottoNumbers= {5,12,23,25,38,41,2};

		// static String[] month = {"January","February","March","April","May","June","July","August","September","October","November","December"}; 
		// static 예약어를 사용하여 Array 클래스 안에서 인스턴스로 선언하면 클래스 변수가 되기 때문에 객체를 생성할 때마다 month 배열을 새로 생성하지 않는다.
		System.out.println(lottoNumbers[5]);
		String[] month = {"January","Feburary","March","April","May","June","July","August","September","October","November","December"};
		System.out.println(month[3]);
		
	}
	
	/* public void twoDimensionArray() {
		 // 배열 선언 - int [][]twoDim; , int [] twoDim[]; , int twoDim[][] 와 같은 배열 선언도 가능하다. 
		int [][] twoDim= {{1,2,3},{4,5,6}};
	} */
	
	//배열의 길이를 확인하는 메소드 
	public void printArrayLength() {
		//int twoDimLength=twoDim.length;
		//System.out.println("twoDim.length="+twoDimLength);
		
		System.out.println("----------");
		int [][]twoDim= {{1,2,3},{4,5,6}}; 
		System.out.println("twoDim.length="+twoDim.length); //1차원 배열의 크기가 2 
		System.out.println("twoDim[0].length="+twoDim[0].length); //2차원 배열의 크기가 3
	
		// int [][]twoDim= {{1,2,3},{4,5,6}}; 을 넣었기 때문에 인덱스 0번방부터 순서대로 1,2,3,4,5,6이 출력된다
		// 그러나 우리는 twoDim 2차원 배열의 크기가 2x3이라는 것을 알았다. 만약에 배열의 크기를 모를 때면 아래와 같은 방법으로 for문을 이용하여 각 인덱스 값을 출력할 수 없다. 
		//for(int loop1=0;loop1<2;loop1++) {
			/* for(int loop2=0;loop2<3;loop2++) {
				System.out.println("twoDim["+loop1+"]["+loop2+"]="+twoDim[loop1][loop2]); */
				
		// 그럴 때에는 .length를 사용하면 좋다. 
			/* for(int loop1=0; loop1<twoDim.length; loop1++) {
				for(int loop2=0; loop2<twoDim[loop1].length;loop2++) {
					System.out.println("twoDim["+loop1+"]["+loop2+"]="+twoDim[loop1][loop2]); */
					
	   // .length를 이용하여 for 루프를 수행될 때마다 길이를 얻어 오는 것은 성능적 측면에서 별로 좋지 않다. 별도의 크기를 알아내는 변수를 할당하여 사용하는 것이 가장 효과적이다. 
			int twoDimLength=twoDim.length; 
			for(int loop1=0;loop1<twoDimLength;loop1++) {
				int twoDim1Length=twoDim[loop1].length;
				for(int loop2=0;loop2<twoDim1Length;loop2++) {
					System.out.println("twoDim["+loop1+"]["+loop2+"]="+twoDim[loop1][loop2]);
					
	/* for 루프문을 더 편리하게 사용하는 방법. 향상된 for문 
	 * for(int [] tempArray:twoDim){ - twoDim이라는 배열의 1차원 값은 배열이다. 그래서 int[] tempArray로 지정 
	 * 	for(int temp:tempArray){ 
	 * 		System.out.println(temp); - 이렇게 사용하면 단점이 있다. 
	 * 
	 * 
	 * 1차원 배열과 2차원 배열의 위치를 모른다는 것. 그 위치를 확인하려면 임시 변수를 두어야 한다. 
	 * int count1=0;
	 * for(int [] tempArray:twoDim){
	 * 	int count2=0;
	 *  for(int temp: tempArray) { 
	 *   System.out.println("twoDim["+count1+"]["+count2+"]="+temp);
	 *   count2++;
	 *  }
	 *  count1++;
	 * }
	 * 
	 * 
	 * 값만 처리하기 위한 배열 - for 루프, 배열의 위치 정보도 같이 필요한 배열은 세미콜론이 2개 있는 for 루프 이용 
	 */ 
			}
		}
		
	}

}
